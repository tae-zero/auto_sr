name: esg_mate

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - /app/.pnpm-store
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://gateway:8080
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    restart: always
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - app-network

  # Gateway (FastAPI)
  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8080:8080"
    volumes:
      - ./gateway:/app
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=8080
      - LOG_LEVEL=INFO
      - GATEWAY_HOST=0.0.0.0
      - GATEWAY_PORT=8080
      - GATEWAY_RELOAD=false
      - SERVICE_DISCOVERY_TYPE=static
      - LOAD_BALANCER_TYPE=round_robin
      - REQUEST_TIMEOUT=30
      - HEALTH_CHECK_INTERVAL=30
      - CORS_ORIGINS=["*"]
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_ALLOW_METHODS=["*"]
      - CORS_ALLOW_HEADERS=["*"]
      - INIT_DATABASE=true
      # Railway 환경변수 설정
      - RAILWAY_ENVIRONMENT=true
      - RAILWAY_TCFD_SERVICE_URL=https://tcfd-service-production.up.railway.app
      - RAILWAY_AUTH_SERVICE_URL=https://auth-service-production.up.railway.app
      - RAILWAY_CHATBOT_SERVICE_URL=https://chatbot-service-production.up.railway.app
      # Railway PostgreSQL 연결 (Public Network URL)
      - DATABASE_URL=postgresql://postgres:YgIQJWEaQShbuQhRsAdVaeBUZatEgrQO@gondola.proxy.rlwy.net:46735/railway
      # AI 및 LangChain 설정
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-2000}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.3}
      - VECTOR_DB_TYPE=${VECTOR_DB_TYPE:-chroma}
      - CHROMA_PERSIST_DIRECTORY=${CHROMA_PERSIST_DIRECTORY:-./chroma_db}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-20971520}
      - SUPPORTED_FILE_TYPES=${SUPPORTED_FILE_TYPES:-txt,pdf,docx,md}
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      tcfd-service:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chatbot Service (FastAPI)
  chatbot-service:
    build:
      context: ./service/chatbot-service
      dockerfile: Dockerfile
    container_name: chatbot-service
    ports:
      - "8001:8001"
    volumes:
      - ./service/chatbot-service:/app
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8001
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    restart: always
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # TCFD Service (FastAPI + 재무정보 처리)
  tcfd-service:
    build:
      context: ./service/tcfd-service
      dockerfile: Dockerfile
    container_name: tcfd-service
    ports:
      - "8005:8005"
    volumes:
      - ./service/tcfd-service:/app
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8005
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      # Railway PostgreSQL 연결 (Public Network URL)
      - DATABASE_URL=postgresql://postgres:YgIQJWEaQShbuQhRsAdVaeBUZatEgrQO@gondola.proxy.rlwy.net:46735/railway
    restart: always
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # TCFD Report Service (FastAPI + LangChain + AI 보고서 생성)
  tcfd-report-service:
    build:
      context: ./service/tcfdreport-service
      dockerfile: Dockerfile
    container_name: tcfd-report-service
    ports:
      - "8006:8006"
    volumes:
      - ./service/tcfdreport-service:/app
      - tcfd_chroma_data:/app/chroma_db
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8006
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      # AI 및 LangChain 설정
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_MAX_TOKENS=${OPENAI_MAX_TOKENS:-2000}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.3}
      - VECTOR_DB_TYPE=${VECTOR_DB_TYPE:-chroma}
      - CHROMA_PERSIST_DIRECTORY=${CHROMA_PERSIST_DIRECTORY:-./chroma_db}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-20971520}
      - SUPPORTED_FILE_TYPES=${SUPPORTED_FILE_TYPES:-txt,pdf,docx,md}
    restart: always
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service (FastAPI)
  auth-service:
    build:
      context: ./service/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8008:8008"
    volumes:
      - ./service/auth-service:/app
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8008
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - INIT_DATABASE=true
      # Railway PostgreSQL 연결 (Public Network URL)
      - DATABASE_URL=postgresql://postgres:YgIQJWEaQShbuQhRsAdVaeBUZatEgrQO@gondola.proxy.rlwy.net:46735/railway
    restart: always
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL (데이터베이스) - 제거됨 (Railway PostgreSQL 사용)

  # Redis (캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always
    command: redis-server
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  tcfd_chroma_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16 