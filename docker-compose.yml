name: esg_mate

services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://gateway:8080
    restart: always
    depends_on:
      - gateway
    networks:
      - app-network

  # Gateway (FastAPI)
  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8080:8080"
    volumes:
      - ./gateway:/app
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=8080
      - LOG_LEVEL=INFO
      - GATEWAY_HOST=0.0.0.0
      - GATEWAY_PORT=8080
      - GATEWAY_RELOAD=false
      - SERVICE_DISCOVERY_TYPE=static
      - LOAD_BALANCER_TYPE=round_robin
      - REQUEST_TIMEOUT=30
      - HEALTH_CHECK_INTERVAL=30
      - CORS_ORIGINS=["*"]
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_ALLOW_METHODS=["*"]
      - CORS_ALLOW_HEADERS=["*"]
      - INIT_DATABASE=true
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      chatbot-service:
        condition: service_started
      redis:
        condition: service_started
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chatbot Service (FastAPI)
  chatbot-service:
    build:
      context: ./service/chatbot-service
      dockerfile: Dockerfile
    container_name: chatbot-service
    ports:
      - "8006:8006"
    volumes:
      - ./service/chatbot-service:/app
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8006
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    restart: always
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL (데이터베이스)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: esg_mate
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d esg_mate"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always
    command: redis-server

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16 