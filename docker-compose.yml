services:
  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://gateway:8000
    depends_on:
      - gateway
    networks:
      - app-network
    restart: unless-stopped

  # Gateway (FastAPI)
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - LOG_LEVEL=INFO
      - GATEWAY_HOST=0.0.0.0
      - REQUEST_TIMEOUT=30
      - HEALTH_CHECK_INTERVAL=30
    depends_on:
      - chat-service
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chat Service (FastAPI)
  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8006
      - LOG_LEVEL=INFO
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (캐싱 및 세션 저장)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes

networks:
  app-network:
    driver: bridge

volumes:
  redis_data: 