name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend CI/CD
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml
        
    - name: Install dependencies
      working-directory: ./frontend
      run: pnpm install --frozen-lockfile
      
    - name: Lint check
      working-directory: ./frontend
      run: pnpm run lint
      
    - name: Type check
      working-directory: ./frontend
      run: pnpm run type-check || pnpm run build
      
    - name: Build frontend
      working-directory: ./frontend
      run: pnpm run build
      
    - name: Deploy to Vercel
      if: github.ref == 'refs/heads/main' && secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != ''
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'
      continue-on-error: true
      
    - name: Vercel Deployment Info
      if: github.ref == 'refs/heads/main' && (secrets.VERCEL_TOKEN == '' || secrets.VERCEL_ORG_ID == '' || secrets.VERCEL_PROJECT_ID == '')
      run: |
        echo "🚀 Vercel 배포 정보:"
        echo "Vercel 시크릿이 설정되지 않아 배포를 건너뜁니다."
        echo "GitHub 저장소 설정에서 다음 시크릿을 추가하세요:"
        echo "1. VERCEL_TOKEN: Vercel API 토큰"
        echo "2. VERCEL_ORG_ID: Vercel 조직 ID"
        echo "3. VERCEL_PROJECT_ID: Vercel 프로젝트 ID"
        echo "시크릿 설정 후 다음 배포에서 자동으로 Vercel에 배포됩니다."

  # Backend Services CI/CD
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, auth-service, chatbot-service]
    permissions:
      contents: read
      packages: write
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          
    - name: Install dependencies
      working-directory: ${{ matrix.service == 'gateway' && 'gateway' || format('service/{0}', matrix.service) }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests (if available)
      working-directory: ${{ matrix.service == 'gateway' && 'gateway' || format('service/{0}', matrix.service) }}
      run: |
        if [ -f "pytest.ini" ] || [ -d "tests" ]; then
          pip install pytest
          pytest
        else
          echo "No tests configured for ${{ matrix.service }}"
        fi
      continue-on-error: true
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'gateway' && 'gateway' || format('service/{0}', matrix.service) }}
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    # Railway 배포는 수동으로 설정해야 함 (각 서비스별 개별 프로젝트)
    - name: Railway Deployment Info
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🚂 Railway 배포 정보:"
        echo "서비스: ${{ matrix.service }}"
        echo "Railway에서 다음 단계를 수행하세요:"
        echo "1. Railway Dashboard에서 새 프로젝트 생성"
        echo "2. GitHub 저장소 연결"
        echo "3. 서비스 경로: ${{ matrix.service == 'gateway' && 'gateway' || format('service/{0}', matrix.service) }}"
        echo "4. 환경변수 설정: RAILWAY_TOKEN=${{ secrets.RAILWAY_TOKEN }}"

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to be ready
        
    - name: Run integration tests
      run: |
        # Health check for all services
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8006/health || exit 1
        curl -f http://localhost:8008/health || exit 1
        
    - name: Stop services
      if: always()
      run: docker-compose down
