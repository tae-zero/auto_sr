name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend CI/CD
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Lint check
      working-directory: ./frontend
      run: npm run lint
      
    - name: Type check
      working-directory: ./frontend
      run: npm run type-check || npm run build
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Deploy to Vercel
      if: github.ref == 'refs/heads/main'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

  # Backend Services CI/CD
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, auth-service, chatbot-service]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          
    - name: Install dependencies
      working-directory: ./${{ matrix.service == 'gateway' && 'gateway' || 'service/' + matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests (if available)
      working-directory: ./${{ matrix.service == 'gateway' && 'gateway' || 'service/' + matrix.service }}
      run: |
        if [ -f "pytest.ini" ] || [ -f "tests/" ]; then
          pip install pytest
          pytest
        else
          echo "No tests configured for ${{ matrix.service }}"
        fi
      continue-on-error: true
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service == 'gateway' && 'gateway' || 'service/' + matrix.service }}
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to Railway
      if: github.ref == 'refs/heads/main'
      uses: bervProject/railway-deploy@v1.0.0
      with:
        service: ${{ matrix.service }}
        token: ${{ secrets.RAILWAY_TOKEN }}

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 30  # Wait for services to be ready
        
    - name: Run integration tests
      run: |
        # Health check for all services
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8006/health || exit 1
        curl -f http://localhost:8008/health || exit 1
        
    - name: Stop services
      if: always()
      run: docker-compose down
